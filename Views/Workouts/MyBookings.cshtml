@model IEnumerable<PulseFit.Management.Web.Models.BookingViewModel>
@using Newtonsoft.Json

@{
    Layout = "_Dashboard";
    ViewBag.PageTitle = "My Bookings";
    ViewBag.SubPageTitle = "List";

    var jsonSerializerSettings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };

    var serializedData = JsonConvert.SerializeObject(Model, jsonSerializerSettings);
}

<div class="container my-5">
    <h2 class="title-neon mb-4">My Bookings</h2>

    @if (!Model.Any())
    {
        <div class="alert-neon text-center">No bookings found.</div>
    }
    else
    {
        <div id="Grid"></div>
    }
</div>


@section Scripts {
    <script id="actionTemplate" type="text/x-template">
        <a href="/Workouts/MyBookingsDetails/${Id}" class="btn btn-neon-blue neon-hover-shadow me-2">
            <i class="fas fa-info-circle"></i> Details
        </a>

        <button class="btn btn-neon-pink neon-hover-shadow me-2 cancel-booking-btn"
                data-id="${Id}" data-training-date="${TrainingDate}">
            <i class="fas fa-times"></i> Cancel
        </button>
    </script>

    <script>
        $(document).ready(function () {
            var serializedData = @Html.Raw(serializedData);

            serializedData.forEach(function (booking) {
            switch (booking.Status) {
                case 0:
                    booking.StatusText = "Reserved";
                    break;
                case 1:
                    booking.StatusText = "Confirmed";
                    break;
                case 2:
                    booking.StatusText = "Canceled";
                    break;
                }
            });

            var grid = new ej.grids.Grid({
                dataSource: serializedData,
                allowPaging: true,
                allowSorting: true,
                allowFiltering: true,
                pageSettings: { pageSize: 10 },
                toolbar: ['Search'],
                columns: [
                    { field: "WorkoutName", headerText: "Workout", width: 140 },
                    { field: "GymName", headerText: "Gym", width: 140 },
                    { field: "TrainingDate", headerText: "Training Date", type: "date", format: 'yMd', width: 140 },
                    { field: "ReservationDate", headerText: "Reservation Date", type: "date", format: 'yMd', width: 140 },
                    { field: "StatusText", headerText: "Status", width: 120 },
                    { headerText: "Actions", width: 200, template: "#actionTemplate" }
                ],
                rowHeight: 60,
                gridLines: 'Horizontal',
                queryCellInfo: function (args) {
                    args.cell.style.fontSize = "1.1rem";
                }
            });
            grid.appendTo("#Grid");

            // Handle Cancel Booking
            $(document).on("click", ".cancel-booking-btn", function () {
                var bookingId = $(this).data("id");
                var trainingDate = new Date($(this).data("training-date"));
                var now = new Date();
                var diffInHours = (trainingDate - now) / (1000 * 60 * 60);

                if (diffInHours < 24) {
                    Swal.fire({
                        title: 'Attention!',
                        text: 'This booking is less than 24 hours away. Canceling now may result in penalties.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Cancel Anyway',
                        cancelButtonText: 'Keep Booking'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            cancelBooking(bookingId);
                        }
                    });
                } else {
                    Swal.fire({
                        title: 'Confirm Cancellation',
                        text: 'Are you sure you want to cancel this booking?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, Cancel it',
                        cancelButtonText: 'No, Keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            cancelBooking(bookingId);
                        }
                    });
                }
            });

            // Function to handle booking cancellation
            function cancelBooking(bookingId) {
                $.ajax({
                    url: `/Workouts/CancelBooking/${bookingId}`,
                    method: "POST",
                    success: function () {
                        Swal.fire('Cancelled!', 'Your booking has been cancelled.', 'success')
                            .then(() => location.reload());
                    },
                    error: function () {
                        Swal.fire('Error!', 'There was an issue cancelling your booking.', 'error');
                    }
                });
            }
        });

    </script>
}